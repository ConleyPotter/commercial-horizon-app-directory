/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: string;
  description?: string;
  price?: number;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  productCategory?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productCategory";
  };
};

export type ProductCategory = {
  _id: string;
  _type: "productCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  parentCategory?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productCategory";
  };
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
};

export type BlankPage = {
  _id: string;
  _type: "blank-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  featured_image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  meta_data?: {
    meta_title?: string;
    meta_description?: string;
    open_graph_image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
  richTextBlock?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type ProductLandingPage = {
  _id: string;
  _type: "product-landing-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  featured_image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  meta_data?: {
    meta_title?: string;
    meta_description?: string;
    open_graph_image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
  construction_features?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  gallery?: {
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
    display?: "stacked" | "inline" | "carousel";
    zoom?: boolean;
  };
  design_center_url?: string;
  virtual_tours?: Array<{
    virtual_tour_title?: string;
    virtual_tour_url?: string;
    _key: string;
  }>;
  video?: {
    url?: string;
    video_content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
};

export type ContentBlock = {
  _id: string;
  _type: "contentBlock";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  variant?: "rich text block" | "gallery" | "columns" | "responsive image" | "CTA group";
  ctaGroup?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "cta";
  }>;
  heading?: string;
  subheadline?: string;
  responsiveImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  richTextBlock?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    title?: string;
    ctaCopy?: string;
    link?: string;
    icon?: string;
    _type: "cta";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  twoColumns?: {
    columnOne?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "contentBlock";
    }>;
    columnTwo?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "contentBlock";
    }>;
  };
};

export type Cta = {
  _id: string;
  _type: "cta";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  ctaCopy?: string;
  link?: string;
  icon?: string;
};

export type MenuItem = {
  _id: string;
  _type: "menuItem";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  menu?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "menu";
  };
  type?: "normal" | "cta" | "megaMenu" | "image";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ctaValues?: {
    ctaCopy?: string;
    link?: string;
    button?: boolean;
    buttonText?: string;
    icon?: string;
  };
  children?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "menuItem";
  }>;
  featuredPosts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "post";
  }>;
};

export type Menu = {
  _id: string;
  _type: "menu";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  items?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "menuItem";
  }>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  featured_image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  slug?: Slug;
  meta_data?: {
    meta_title?: string;
    meta_description?: string;
  };
  blocks?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "contentBlock";
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  excerpt?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  picture?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Product | ProductCategory | BlankPage | ProductLandingPage | ContentBlock | Cta | MenuItem | Menu | Page | Post | Author | Settings | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | MediaTag | Slug | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
} | null;
// Variable: heroQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {		content,			_id,	"status": select(_originalId in path("drafts.**") => "draft", "published"),	"title": coalesce(title, "Untitled"),	"slug": slug.current,	excerpt,	coverImage,	"date": coalesce(date, _updatedAt),	"author": author->{"name": coalesce(name, "Anonymous"), picture},	}
export type HeroQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: moreStoriesQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {			_id,	"status": select(_originalId in path("drafts.**") => "draft", "published"),	"title": coalesce(title, "Untitled"),	"slug": slug.current,	excerpt,	coverImage,	"date": coalesce(date, _updatedAt),	"author": author->{"name": coalesce(name, "Anonymous"), picture},	}
export type MoreStoriesQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {		content,			_id,	"status": select(_originalId in path("drafts.**") => "draft", "published"),	"title": coalesce(title, "Untitled"),	"slug": slug.current,	excerpt,	coverImage,	"date": coalesce(date, _updatedAt),	"author": author->{"name": coalesce(name, "Anonymous"), picture},	}
export type PostQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: pageQuery
// Query: *[_type=='page' && slug.current == $slug] [0] {		"blocks": blocks[]->{					title,	variant,	heading,	subheadline,	"responsiveImage": responsiveImage.asset->{	url, 	source,	altText},	"gallery": gallery[].asset->{	url, 	source,	altText},	richTextBlock,	"ctaGroup": ctaGroup[]->{			ctaCopy,	link,	icon,	},	twoColumns {		"columnOne": columnOne[]->{				title,	variant,	heading,	subheadline,	"responsiveImage": responsiveImage.asset->{	url, 	source,	altText},	"gallery": gallery[].asset->{	url, 	source,	altText},	richTextBlock,	"ctaGroup": ctaGroup[]->{			ctaCopy,	link,	icon,	},		},		"columnTwo": columnTwo[]->{				title,	variant,	heading,	subheadline,	"responsiveImage": responsiveImage.asset->{	url, 	source,	altText},	"gallery": gallery[].asset->{	url, 	source,	altText},	richTextBlock,	"ctaGroup": ctaGroup[]->{			ctaCopy,	link,	icon,	},		},	},	"ctaGroup": ctaGroup[]->{			ctaCopy,	link,	icon,	}		}	}
export type PageQueryResult = {
  blocks: Array<{
    title: string | null;
    variant: "columns" | "CTA group" | "gallery" | "responsive image" | "rich text block" | null;
    heading: string | null;
    subheadline: string | null;
    responsiveImage: {
      url: string | null;
      source: SanityAssetSourceData | null;
      altText: string | null;
    } | null;
    gallery: Array<{
      url: string | null;
      source: SanityAssetSourceData | null;
      altText: string | null;
    } | null> | null;
    richTextBlock: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      title?: string;
      ctaCopy?: string;
      link?: string;
      icon?: string;
      _type: "cta";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }> | null;
    ctaGroup: Array<{
      ctaCopy: string | null;
      link: string | null;
      icon: string | null;
    }> | null;
    twoColumns: {
      columnOne: Array<{
        title: string | null;
        variant: "columns" | "CTA group" | "gallery" | "responsive image" | "rich text block" | null;
        heading: string | null;
        subheadline: string | null;
        responsiveImage: {
          url: string | null;
          source: SanityAssetSourceData | null;
          altText: string | null;
        } | null;
        gallery: Array<{
          url: string | null;
          source: SanityAssetSourceData | null;
          altText: string | null;
        } | null> | null;
        richTextBlock: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          title?: string;
          ctaCopy?: string;
          link?: string;
          icon?: string;
          _type: "cta";
          _key: string;
        } | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
          _key: string;
        }> | null;
        ctaGroup: Array<{
          ctaCopy: string | null;
          link: string | null;
          icon: string | null;
        }> | null;
      }> | null;
      columnTwo: Array<{
        title: string | null;
        variant: "columns" | "CTA group" | "gallery" | "responsive image" | "rich text block" | null;
        heading: string | null;
        subheadline: string | null;
        responsiveImage: {
          url: string | null;
          source: SanityAssetSourceData | null;
          altText: string | null;
        } | null;
        gallery: Array<{
          url: string | null;
          source: SanityAssetSourceData | null;
          altText: string | null;
        } | null> | null;
        richTextBlock: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          title?: string;
          ctaCopy?: string;
          link?: string;
          icon?: string;
          _type: "cta";
          _key: string;
        } | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
          _key: string;
        }> | null;
        ctaGroup: Array<{
          ctaCopy: string | null;
          link: string | null;
          icon: string | null;
        }> | null;
      }> | null;
    } | null;
  }> | null;
} | null;
// Variable: navBarQuery
// Query: *[_type=='menu' && name=='Navbar']{		'items': items[]->{ 			name, 			"slug": slug.current, 			children[]->{				name, 				"slug": slug.current 			}		}	}
export type NavBarQueryResult = Array<{
  items: Array<{
    name: string | null;
    slug: string | null;
    children: Array<{
      name: string | null;
      slug: string | null;
    }> | null;
  }> | null;
}>;
// Variable: utilityCtaMenuQuery
// Query: *[_type=='menu' && name=='Utility CTA Bar']{		'items': items[]->{ 			name, 			"slug": slug.current,			"image": image.asset->{	url, 	source,	altText},		}	}
export type UtilityCtaMenuQueryResult = Array<{
  items: Array<{
    name: string | null;
    slug: string | null;
    image: {
      url: string | null;
      source: SanityAssetSourceData | null;
      altText: string | null;
    } | null;
  }> | null;
}>;
// Variable: ctaQuery
// Query: *[_type=='cta' && slug.current == $slug] [0] {			ctaCopy,	link,	icon,	}
export type CtaQueryResult = {
  ctaCopy: string | null;
  link: string | null;
  icon: string | null;
} | null;
// Variable: contentBlockQuery
// Query: *[_type=='contentBlock' && defined(variant)] [0] {				title,	variant,	heading,	subheadline,	"responsiveImage": responsiveImage.asset->{	url, 	source,	altText},	"gallery": gallery[].asset->{	url, 	source,	altText},	richTextBlock,	"ctaGroup": ctaGroup[]->{			ctaCopy,	link,	icon,	},	twoColumns {		"columnOne": columnOne[]->{				title,	variant,	heading,	subheadline,	"responsiveImage": responsiveImage.asset->{	url, 	source,	altText},	"gallery": gallery[].asset->{	url, 	source,	altText},	richTextBlock,	"ctaGroup": ctaGroup[]->{			ctaCopy,	link,	icon,	},		},		"columnTwo": columnTwo[]->{				title,	variant,	heading,	subheadline,	"responsiveImage": responsiveImage.asset->{	url, 	source,	altText},	"gallery": gallery[].asset->{	url, 	source,	altText},	richTextBlock,	"ctaGroup": ctaGroup[]->{			ctaCopy,	link,	icon,	},		},	},	"ctaGroup": ctaGroup[]->{			ctaCopy,	link,	icon,	}	}
export type ContentBlockQueryResult = {
  title: string | null;
  variant: "columns" | "CTA group" | "gallery" | "responsive image" | "rich text block" | null;
  heading: string | null;
  subheadline: string | null;
  responsiveImage: {
    url: string | null;
    source: SanityAssetSourceData | null;
    altText: string | null;
  } | null;
  gallery: Array<{
    url: string | null;
    source: SanityAssetSourceData | null;
    altText: string | null;
  } | null> | null;
  richTextBlock: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    title?: string;
    ctaCopy?: string;
    link?: string;
    icon?: string;
    _type: "cta";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  ctaGroup: Array<{
    ctaCopy: string | null;
    link: string | null;
    icon: string | null;
  }> | null;
  twoColumns: {
    columnOne: Array<{
      title: string | null;
      variant: "columns" | "CTA group" | "gallery" | "responsive image" | "rich text block" | null;
      heading: string | null;
      subheadline: string | null;
      responsiveImage: {
        url: string | null;
        source: SanityAssetSourceData | null;
        altText: string | null;
      } | null;
      gallery: Array<{
        url: string | null;
        source: SanityAssetSourceData | null;
        altText: string | null;
      } | null> | null;
      richTextBlock: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        title?: string;
        ctaCopy?: string;
        link?: string;
        icon?: string;
        _type: "cta";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }> | null;
      ctaGroup: Array<{
        ctaCopy: string | null;
        link: string | null;
        icon: string | null;
      }> | null;
    }> | null;
    columnTwo: Array<{
      title: string | null;
      variant: "columns" | "CTA group" | "gallery" | "responsive image" | "rich text block" | null;
      heading: string | null;
      subheadline: string | null;
      responsiveImage: {
        url: string | null;
        source: SanityAssetSourceData | null;
        altText: string | null;
      } | null;
      gallery: Array<{
        url: string | null;
        source: SanityAssetSourceData | null;
        altText: string | null;
      } | null> | null;
      richTextBlock: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        title?: string;
        ctaCopy?: string;
        link?: string;
        icon?: string;
        _type: "cta";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }> | null;
      ctaGroup: Array<{
        ctaCopy: string | null;
        link: string | null;
        icon: string | null;
      }> | null;
    }> | null;
  } | null;
} | null;
// Variable: menuItemQuery
// Query: *[_type=='menuItem'] [0] {			ctaCopy,	link,	icon,		}
export type MenuItemQueryResult = {
  ctaCopy: null;
  link: null;
  icon: null;
} | null;
// Variable: ctaGroupQuery
// Query: *[_type=='contentBlock' && defined(ctaGroup)] [0] {		"ctaGroup": ctaGroup[]->{				ctaCopy,	link,	icon,		}	}
export type CtaGroupQueryResult = {
  ctaGroup: Array<{
    ctaCopy: string | null;
    link: string | null;
    icon: string | null;
  }> | null;
} | null;

// Source: ./app/(horizon-gsa-web)/blogs/[slug]/page.tsx
// Variable: postSlugs
// Query: *[_type == "post" && defined(slug.current)]{"slug": slug.current}
export type PostSlugsResult = Array<{
  slug: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "\n\t*[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {\n\t\tcontent,\n\t\t\n\t_id,\n\t\"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n\t\"title\": coalesce(title, \"Untitled\"),\n\t\"slug\": slug.current,\n\texcerpt,\n\tcoverImage,\n\t\"date\": coalesce(date, _updatedAt),\n\t\"author\": author->{\"name\": coalesce(name, \"Anonymous\"), picture},\n\n\t}\n": HeroQueryResult;
    "\n\t*[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n\t\t\n\t_id,\n\t\"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n\t\"title\": coalesce(title, \"Untitled\"),\n\t\"slug\": slug.current,\n\texcerpt,\n\tcoverImage,\n\t\"date\": coalesce(date, _updatedAt),\n\t\"author\": author->{\"name\": coalesce(name, \"Anonymous\"), picture},\n\n\t}\n": MoreStoriesQueryResult;
    "\n\t*[_type == \"post\" && slug.current == $slug] [0] {\n\t\tcontent,\n\t\t\n\t_id,\n\t\"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n\t\"title\": coalesce(title, \"Untitled\"),\n\t\"slug\": slug.current,\n\texcerpt,\n\tcoverImage,\n\t\"date\": coalesce(date, _updatedAt),\n\t\"author\": author->{\"name\": coalesce(name, \"Anonymous\"), picture},\n\n\t}\n": PostQueryResult;
    "\n\t*[_type=='page' && slug.current == $slug] [0] {\n\t\t\"blocks\": blocks[]->{\n\t\t\t\n\t\n\ttitle,\n\tvariant,\n\theading,\n\tsubheadline,\n\t\"responsiveImage\": responsiveImage.asset->{\n\turl, \n\tsource,\n\taltText\n},\n\t\"gallery\": gallery[].asset->{\n\turl, \n\tsource,\n\taltText\n},\n\trichTextBlock,\n\t\"ctaGroup\": ctaGroup[]->{\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t},\n\n\ttwoColumns {\n\t\t\"columnOne\": columnOne[]->{\n\t\t\t\n\ttitle,\n\tvariant,\n\theading,\n\tsubheadline,\n\t\"responsiveImage\": responsiveImage.asset->{\n\turl, \n\tsource,\n\taltText\n},\n\t\"gallery\": gallery[].asset->{\n\turl, \n\tsource,\n\taltText\n},\n\trichTextBlock,\n\t\"ctaGroup\": ctaGroup[]->{\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t},\n\n\t\t},\n\t\t\"columnTwo\": columnTwo[]->{\n\t\t\t\n\ttitle,\n\tvariant,\n\theading,\n\tsubheadline,\n\t\"responsiveImage\": responsiveImage.asset->{\n\turl, \n\tsource,\n\taltText\n},\n\t\"gallery\": gallery[].asset->{\n\turl, \n\tsource,\n\taltText\n},\n\trichTextBlock,\n\t\"ctaGroup\": ctaGroup[]->{\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t},\n\n\t\t},\n\t},\n\t\"ctaGroup\": ctaGroup[]->{\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t}\n\n\t\t}\n\t}\n": PageQueryResult;
    "\n\t*[_type=='menu' && name=='Navbar']{\n\t\t'items': items[]->{ \n\t\t\tname, \n\t\t\t\"slug\": slug.current, \n\t\t\tchildren[]->{\n\t\t\t\tname, \n\t\t\t\t\"slug\": slug.current \n\t\t\t}\n\t\t}\n\t}\n": NavBarQueryResult;
    "\n\t*[_type=='menu' && name=='Utility CTA Bar']{\n\t\t'items': items[]->{ \n\t\t\tname, \n\t\t\t\"slug\": slug.current,\n\t\t\t\"image\": image.asset->{\n\turl, \n\tsource,\n\taltText\n},\n\t\t}\n\t}\n": UtilityCtaMenuQueryResult;
    "\n\t*[_type=='cta' && slug.current == $slug] [0] {\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t}\n": CtaQueryResult;
    "\n\t*[_type=='contentBlock' && defined(variant)] [0] {\n\t\t\n\t\n\ttitle,\n\tvariant,\n\theading,\n\tsubheadline,\n\t\"responsiveImage\": responsiveImage.asset->{\n\turl, \n\tsource,\n\taltText\n},\n\t\"gallery\": gallery[].asset->{\n\turl, \n\tsource,\n\taltText\n},\n\trichTextBlock,\n\t\"ctaGroup\": ctaGroup[]->{\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t},\n\n\ttwoColumns {\n\t\t\"columnOne\": columnOne[]->{\n\t\t\t\n\ttitle,\n\tvariant,\n\theading,\n\tsubheadline,\n\t\"responsiveImage\": responsiveImage.asset->{\n\turl, \n\tsource,\n\taltText\n},\n\t\"gallery\": gallery[].asset->{\n\turl, \n\tsource,\n\taltText\n},\n\trichTextBlock,\n\t\"ctaGroup\": ctaGroup[]->{\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t},\n\n\t\t},\n\t\t\"columnTwo\": columnTwo[]->{\n\t\t\t\n\ttitle,\n\tvariant,\n\theading,\n\tsubheadline,\n\t\"responsiveImage\": responsiveImage.asset->{\n\turl, \n\tsource,\n\taltText\n},\n\t\"gallery\": gallery[].asset->{\n\turl, \n\tsource,\n\taltText\n},\n\trichTextBlock,\n\t\"ctaGroup\": ctaGroup[]->{\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t},\n\n\t\t},\n\t},\n\t\"ctaGroup\": ctaGroup[]->{\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t}\n\n\t}\n": ContentBlockQueryResult;
    "\n\t*[_type=='menuItem'] [0] {\n\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\t\n\t}\n": MenuItemQueryResult;
    "\n\t*[_type=='contentBlock' && defined(ctaGroup)] [0] {\n\t\t\"ctaGroup\": ctaGroup[]->{\n\t\t\t\n\tctaCopy,\n\tlink,\n\ticon,\n\n\t\t}\n\t}\n": CtaGroupQueryResult;
    "*[_type == \"post\" && defined(slug.current)]{\"slug\": slug.current}": PostSlugsResult;
  }
}
